{"version":3,"sources":["Components/Section/Section.module.css","Components/ContactForm/ContactForm.js","Components/ContactItem/ContactItem.js","Components/ContactList/ContactList.js","Components/Filter/Filter.js","Components/Section/Section.js","App.js","index.js","Components/ContactForm/ContactForm.module.css","Components/Filter/Filter.module.css"],"names":["module","exports","ContactForm","state","name","number","handleInputChange","event","currentTarget","value","setState","handleSubmitForm","preventDefault","props","onAddContact","reset","onSubmit","this","className","s","input","type","onChange","pattern","title","required","Component","ContactItem","id","deleteContact","onClick","ContactList","contacts","map","Filter","onChangeFilter","label","Section","children","container","App","filter","contactId","prevState","contact","uuidv4","find","alert","filteredVisibleContacts","normalizedFilter","toLocaleLowerCase","includes","localStorage","getItem","parsedContacts","JSON","parse","prevProps","setItem","stringify","filteredContactList","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.df42bdef.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Section_container__3NTEj\"};","import { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport s from \"./ContactForm.module.css\";\n\nclass ContactForm extends Component {\n  state = {\n    name: \"\",\n    number: \"\",\n  };\n\n  handleInputChange = (event) => {\n    const { name, value } = event.currentTarget;\n    this.setState({ [name]: value });\n  };\n  handleSubmitForm = (event) => {\n    event.preventDefault();\n    this.props.onAddContact(this.state);\n    this.reset();\n  };\n  reset = () => {\n    this.setState({ name: \"\", number: \"\" });\n  };\n  render() {\n    return (\n      <form onSubmit={this.handleSubmitForm}>\n        <label>\n          Name\n          <input\n            className={s.input}\n            type=\"text\"\n            name=\"name\"\n            value={this.state.name}\n            onChange={this.handleInputChange}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n\n        <label>\n          Number\n          <input\n            className={s.input}\n            type=\"tel\"\n            name=\"number\"\n            value={this.state.number}\n            onChange={this.handleInputChange}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n        </label>\n        <button type=\"submit\">Add contact</button>\n      </form>\n    );\n  }\n}\n\nexport default ContactForm;\n\nContactForm.propTypes = {\n  onAddContact: PropTypes.func.isRequired,\n};\n","import PropTypes from \"prop-types\";\n\nconst ContactItem = ({ id, number, name, deleteContact }) => {\n  return (\n    <>\n      <p>\n        {name}: {number}\n      </p>\n      <button type=\"button\" onClick={() => deleteContact(id)}>\n        Delete\n      </button>\n    </>\n  );\n};\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  deleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactItem;\n","import PropTypes from \"prop-types\";\nimport ContactItem from \"../ContactItem/ContactItem\";\n\nconst ContactList = ({ contacts, deleteContact }) => (\n  <ul>\n    {contacts.map(({ id, number, name }) => (\n      <li key={id} name={name}>\n        <ContactItem\n          id={id}\n          name={name}\n          number={number}\n          deleteContact={deleteContact}\n        />\n      </li>\n    ))}\n  </ul>\n);\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default ContactList;\n","import PropTypes from \"prop-types\";\nimport s from \"./Filter.module.css\";\n\nconst Filter = ({ value, onChangeFilter }) => {\n  return (\n    <label className={s.label}>\n      Find contacts by name\n      <input\n        className={s.input}\n        type=\"text\"\n        value={value}\n        onChange={onChangeFilter}\n      ></input>\n    </label>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChangeFilter: PropTypes.func.isRequired,\n};\nexport default Filter;\n","import PropTypes from \"prop-types\";\nimport s from \"./Section.module.css\";\n\nexport default function Section({ children }) {\n  return <div className={s.container}>{children}</div>;\n}\n\nSection.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n","import { v4 as uuidv4 } from \"uuid\";\nimport React, { Component } from \"react\";\nimport ContactForm from \"./Components/ContactForm/ContactForm\";\nimport ContactList from \"./Components/ContactList/ContactList\";\nimport Filter from \"./Components/Filter/Filter\";\nimport Section from \"./Components/Section/Section\";\n\nclass App extends Component {\n  state = {\n    contacts: [\n      { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n      { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\n      { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\n      { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\n    ],\n    filter: \"\",\n  };\n\n  componentDidMount() {\n    const contact = localStorage.getItem(\"contacts\");\n    const parsedContacts = JSON.parse(contact);\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.contacts !== prevState.contacts) {\n      localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n    }\n  }\n\n  deleteContact = (contactId) => {\n    this.setState((prevState) => ({\n      contacts: prevState.contacts.filter(\n        (contact) => contact.id !== contactId\n      ),\n    }));\n  };\n  onAddContact = ({ name, number }) => {\n    const contact = {\n      id: uuidv4(),\n      name,\n      number,\n    };\n    if (this.state.contacts.find((contact) => contact.name === name)) {\n      alert(`${name} is already in contacts.`);\n    } else {\n      return this.setState(({ contacts }) => ({\n        contacts: [contact, ...contacts],\n      }));\n    }\n  };\n  onChangeFilter = (event) => {\n    this.setState({ filter: event.currentTarget.value });\n  };\n  filteredVisibleContacts = () => {\n    const { contacts, filter } = this.state;\n    const normalizedFilter = filter.toLocaleLowerCase();\n    return contacts.filter((contact) =>\n      contact.name.toLocaleLowerCase().includes(normalizedFilter)\n    );\n  };\n  render() {\n    const { filter } = this.state;\n\n    const filteredContactList = this.filteredVisibleContacts();\n    return (\n      <div>\n        <Section>\n          <h1>Phonebook</h1>\n          <ContactForm onAddContact={this.onAddContact} />\n        </Section>\n        <Section>\n          <h2>My Contacts</h2>\n          <Filter value={filter} onChangeFilter={this.onChangeFilter} />\n        </Section>\n        <Section>\n          <ContactList\n            contacts={filteredContactList}\n            deleteContact={this.deleteContact}\n          />\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"ContactForm_input__3JIFO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__21lFa\"};"],"sourceRoot":""}